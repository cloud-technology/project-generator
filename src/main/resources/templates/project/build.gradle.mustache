plugins {
  id 'org.springframework.boot' version '2.7.0'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'java'
  id 'jacoco'
}

group = '{{groupId}}'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

ext {
  set('springCloudVersion', "2021.0.3")
  set('testcontainersVersion', "1.17.3") // https://search.maven.org/artifact/org.testcontainers/testcontainers-bom
  set('springCloudGcpVersion', "3.3.0") // https://search.maven.org/artifact/com.google.cloud/spring-cloud-gcp-dependencies
  set('springdocVersion', "1.6.11") // https://search.maven.org/artifact/org.springdoc/springdoc-openapi-ui
  set('chaosMonkeyVersion', "2.6.1") // https://search.maven.org/artifact/de.codecentric/chaos-monkey-spring-boot
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-redis'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-data-rest'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.liquibase:liquibase-core'
  implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
  implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
  implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
  implementation 'org.springframework.cloud:spring-cloud-stream'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
  runtimeOnly 'org.postgresql:postgresql'
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  //
  implementation "org.springdoc:springdoc-openapi-ui:${springdocVersion}"
  implementation "org.springdoc:springdoc-openapi-data-rest:${springdocVersion}"
  implementation "org.openapitools:jackson-databind-nullable:0.2.2"
  // gcp
  // implementation 'com.google.cloud:spring-cloud-gcp-starter'
  implementation 'com.google.cloud:spring-cloud-gcp-starter-sql-postgresql'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-trace'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-secretmanager'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-metrics'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-logging'
  // chaos-monkey
	implementation "de.codecentric:chaos-monkey-spring-boot:${chaosMonkeyVersion}"
  // for test
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:postgresql'
}

dependencyManagement {
  imports {
    mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
  }
}

tasks.named('test') {
  useJUnitPlatform()
  testLogging.showStandardStreams = true
}

jacocoTestReport {
	// tests are required to run before generating the report
	dependsOn test
	reports {
		// sonar analysis equired
		xml.required.set(true)
		csv.required.set(true)
		html.required.set(true)
	}
}